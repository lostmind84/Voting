{"version":3,"sources":["components/HeaderComponent.js","components/WhitelistComponent.js","components/StatusChange.js","components/ProposalsComponent.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","props","context","useState","owner","setOwner","winningProp","setWinningProp","currentWallet","setCurrentWallet","currentStatus","setCurrentStatus","useEffect","getOwner","getStatus","getWinner","accounts","substring","length","a","contract","methods","call","o","workflowStatus","parseInt","winningProposalId","id","wProp","Row","className","Col","xs","Card","Body","Title","Badge","variant","_address","WhitelistComponent","addToWhiteListInput","useRef","voters","setVoters","voterAdded","setvoterAdded","voterRegisteredCallback","error","result","console","log","arrVoters","push","returnValues","_voterAddress","events","VoterRegistered","getPastEvents","fromBlock","map","e","i","subscribe","addToWhitelist","event","addVoter","current","value","send","from","Form","inline","Control","type","placeholder","ref","contractOwner","Button","onClick","disabled","ListGroup","voter","Item","key","StatusChange","initialStatus","workflowStatusChangeCallback","_newStatus","WorkflowStatusChange","changeStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","border","text","ProposalsComponent","addProposalInput","proposalList","setProposalList","proposalAdded","setproposalAdded","proposalRegisteredCallback","ProposalRegistered","_proposalId","getProposal","result2","Promise","all","then","res","proposalsArray","addProposal","voteForProposal","setVote","prop","voteCount","description","getVoteButton","App","web3","setContext","initState","Web3","window","ethereum","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","alert","on","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb83ceaf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Badge, Card } from \"react-bootstrap\";\n\nconst HeaderComponent = (props) => {\n  const context = props.context;\n  const [owner, setOwner] = useState(\"\");\n  const [winningProp, setWinningProp] = useState(null);\n  const [currentWallet, setCurrentWallet] = useState(\"\");\n  const currentStatus = props.currentStatus;\n  const setCurrentStatus = props.setCurrentStatus;\n\n  useEffect(() => {\n    getOwner();\n    getStatus();\n    getWinner();\n\n    setCurrentWallet(\n      `${context.accounts[0].substring(0, 5)}...${context.accounts[0].substring(\n        38,\n        context.accounts[0].length\n      )}`\n    );\n  }, [currentStatus, context]);\n\n  const getOwner = async () => {\n    const o = await context.contract.methods.owner().call();\n    if (context.accounts[0] === o) setOwner(`${o} (you)`);\n    else setOwner(o);\n  };\n\n  const getStatus = async () => {\n    const o = await context.contract.methods.workflowStatus().call();\n    setCurrentStatus(parseInt(o));\n  };\n\n  const getStatusText = function () {\n    if (currentStatus === 0) return \"Registering voters (1.)\";\n    else if (currentStatus === 1) return \"Proposal registration started (3.)\";\n    else if (currentStatus === 2) return \"Proposal registration ended (4.)\";\n    else if (currentStatus === 3) return \"Voting session started (5.)\";\n    else if (currentStatus === 4) return \"Voting session ended (6.)\";\n    else if (currentStatus === 5) return \"Vote tallied (7.)\";\n  };\n\n  const getWinner = async () => {\n    if (currentStatus === 5) {\n      const id = await context.contract.methods.winningProposalId().call();\n      if (id) {\n        const wProp = await context.contract.methods.getWinner().call();\n        wProp.id = id;\n        setWinningProp(wProp);\n      }\n    }\n  };\n\n  return (\n    <Row className=\"mt-2\">\n      <Col></Col>\n      <Col xs={10}>\n        <Card className=\"text-center\">\n          <Card.Body>\n            <Card.Title>Connected</Card.Title>\n            <b>Current wallet : </b>\n            <Badge variant=\"success\">{currentWallet}</Badge>\n            <br />\n            <b>Contract address : </b>\n            {` ${context.contract._address}`}\n            <br />\n            <b>Contract owner : </b>\n            {` ${owner}`}\n            <br />\n            <b>Current status : </b>{\" \"}\n            <h4>\n              <Badge variant=\"info\">{getStatusText()}</Badge>\n            </h4>\n            <div>\n              {winningProp !== null\n                ? `Winning proposal is ID=${winningProp.id}`\n                : \"\"}\n            </div>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col></Col>\n    </Row>\n  );\n};\n\nexport default HeaderComponent;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { Button, Row, Col, Card, Form, ListGroup } from \"react-bootstrap\";\n\nconst WhitelistComponent = (props) => {\n  const context = props.context;\n  const currentStatus = props.currentStatus;\n  const addToWhiteListInput = useRef(null);\n  const [voters, setVoters] = useState([]);\n  const [voterAdded, setvoterAdded] = useState(false);\n\n  const voterRegisteredCallback = (error, result) => {\n    if (!error) {\n      //console.log(result.returnValues._voterAddress);\n      const arrVoters = voters;\n      arrVoters.push(result.returnValues._voterAddress);\n      setVoters(arrVoters);\n      setvoterAdded(true);\n    } else console.log(error);\n  };\n\n  async function subscribe() {\n    // subscribe to event\n    await context.contract.events.VoterRegistered(\n      null,\n      voterRegisteredCallback\n    );\n\n    // refresh already registered voters\n    await context.contract.getPastEvents(\n      \"VoterRegistered\",\n      { fromBlock: 0 },\n      function (error, events) {\n        console.log(\"pasEvents found for VoterRegistered\");\n        let result = [];\n        events.map((e, i) => {\n          result.push(e.returnValues._voterAddress);\n        });\n        setVoters(result);\n      }\n    );\n  }\n\n  useEffect(() => {\n    if (voterAdded === false) subscribe();\n    setvoterAdded(false);\n  }, [voterAdded, context]);\n\n  const addToWhitelist = async (event) => {\n    try {\n      await context.contract.methods\n        .addVoter(addToWhiteListInput.current.value)\n        .send({ from: context.accounts[0] });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getButton = () => {\n    if (currentStatus === 0 && context.contractOwner === context.accounts[0])\n      return (\n        <Button variant=\"primary\" onClick={addToWhitelist}>\n          Add\n        </Button>\n      );\n    else if (context.contractOwner !== context.accounts[0])\n      return (\n        <Button variant=\"secondary\" onClick={addToWhitelist} disabled>\n          (Only owner)\n        </Button>\n      );\n    else {\n      return (\n        <Button variant=\"secondary\" onClick={addToWhitelist} disabled>\n          Add\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <Row className=\"mt-2\">\n      <Col></Col>\n      <Col xs={7}>\n        <Card className=\"text-center\">\n          <Card.Body>\n            <Card.Title>1. Whitelist participants</Card.Title>\n            <Form inline>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter an address to whitelist\"\n                className=\"mr-2\"\n                ref={addToWhiteListInput}\n              />\n              {getButton()}\n            </Form>\n\n            <br />\n            <h5>Already registered voters</h5>\n            <ListGroup>\n              {voters.length > 0\n                ? voters.map((voter, i) => {\n                    return <ListGroup.Item key={i}>{voter}</ListGroup.Item>;\n                  })\n                : \"\"}\n            </ListGroup>\n            <ul></ul>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col></Col>\n    </Row>\n  );\n};\n\nexport default WhitelistComponent;\n","import React, { useEffect } from \"react\";\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\n\nconst StatusChange = (props) => {\n  const context = props.context;\n  const currentStatus = props.currentStatus;\n  const setCurrentStatus = props.setCurrentStatus;\n  const initialStatus = props.initialStatus; // Status linked to component position in dapp\n\n  const workflowStatusChangeCallback = (error, result) => {\n    if (!error) {\n      setCurrentStatus(result.returnValues._newStatus);\n    } else console.log(error);\n  };\n\n  async function subscribe() {\n    // subscribe to event\n    await context.contract.events.WorkflowStatusChange(\n      null,\n      workflowStatusChangeCallback\n    );\n  }\n\n  useEffect(() => {\n    subscribe();\n  }, []);\n\n  const changeStatus = async () => {\n    try {\n      if (initialStatus === 0) {\n        await context.contract.methods\n          .startProposalsRegistering()\n          .send({ from: context.accounts[0] });\n      } else if (initialStatus === 1)\n        await context.contract.methods\n          .endProposalsRegistering()\n          .send({ from: context.accounts[0] });\n      else if (initialStatus === 2)\n        await context.contract.methods\n          .startVotingSession()\n          .send({ from: context.accounts[0] });\n      else if (initialStatus === 3)\n        await context.contract.methods\n          .endVotingSession()\n          .send({ from: context.accounts[0] });\n      else if (initialStatus === 4)\n        await context.contract.methods\n          .tallyVotes()\n          .send({ from: context.accounts[0] });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getButton = () => {\n    if (\n      initialStatus === currentStatus &&\n      context.contractOwner === context.accounts[0]\n    )\n      return (\n        <Button variant=\"primary\" onClick={changeStatus}>\n          Change status\n        </Button>\n      );\n    else if (context.contractOwner !== context.accounts[0])\n      return (\n        <Button variant=\"secondary\" onClick={changeStatus} disabled>\n          (Only owner)\n        </Button>\n      );\n    else {\n      return (\n        <Button variant=\"secondary\" onClick={changeStatus} disabled>\n          Not available\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <Row className=\"mt-2\">\n      <Col></Col>\n      <Col xs={7}>\n        <Card className=\"text-center\" border=\"warning\" text=\"error\">\n          <Card.Body>\n            <Card.Title>{props.Title}</Card.Title>\n            {getButton()}\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col></Col>\n    </Row>\n  );\n};\n\nexport default StatusChange;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { Button, Row, Col, Card, Form, ListGroup } from \"react-bootstrap\";\n\nconst ProposalsComponent = (props) => {\n  const context = props.context;\n  const currentStatus = props.currentStatus;\n  const addProposalInput = useRef(null);\n  const [proposalList, setProposalList] = useState([]);\n  const [proposalAdded, setproposalAdded] = useState(false);\n\n  const proposalRegisteredCallback = async (error, result) => {\n    if (!error) {\n      setproposalAdded(true);\n    } else console.log(error);\n  };\n\n  async function subscribe() {\n    // subscribe to event\n    await context.contract.events.ProposalRegistered(\n      null,\n      proposalRegisteredCallback\n    );\n\n    // refresh already registered proposals\n    await context.contract.getPastEvents(\n      \"ProposalRegistered\",\n      { fromBlock: 0 },\n      async function (error, events) {\n        console.log(\"pasEvents found for ProposalRegistered\");\n        let result = [];\n        events.map((e, i) => {\n          try {\n            const id = e.returnValues._proposalId;\n            result.push(getProposal(id));\n          } catch (error) {\n            console.log(error);\n          }\n        });\n\n        // resolve promises\n        let result2 = [];\n        await Promise.all(result).then((res) => {\n          result2 = res;\n        });\n\n        setProposalList(result2);\n      }\n    );\n  }\n\n  const getProposal = async (id) => {\n    return await context.contract.methods.proposalsArray(id).call();\n  };\n\n  useEffect(() => {\n    subscribe();\n    setproposalAdded(false);\n  }, [proposalAdded]);\n\n  const addProposal = async (event) => {\n    try {\n      await context.contract.methods\n        .addProposal(addProposalInput.current.value)\n        .send({ from: context.accounts[0] });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getButton = () => {\n    if (currentStatus === 1)\n      return (\n        <Button variant=\"primary\" onClick={addProposal}>\n          Register\n        </Button>\n      );\n    else\n      return (\n        <Button variant=\"secondary\" onClick={addProposal} disabled>\n          Not available\n        </Button>\n      );\n  };\n\n  const getVoteButton = (id) => {\n    if (currentStatus === 1) return;\n    else if (currentStatus === 3)\n      return (\n        <Button\n          variant=\"success\"\n          onClick={() => {\n            voteForProposal(id);\n          }}\n        >\n          Vote !\n        </Button>\n      );\n  };\n\n  const voteForProposal = async (id) => {\n    try {\n      await context.contract.methods\n        .setVote(id)\n        .send({ from: context.accounts[0] });\n\n      setproposalAdded(true);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Row className=\"mt-2\">\n      <Col></Col>\n      <Col xs={10}>\n        <Card className=\"text-center\">\n          <Card.Body>\n            <Card.Title>3. Register proposals</Card.Title>\n            <Form>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter a proposal\"\n                className=\"mb-2\"\n                ref={addProposalInput}\n              />\n              {getButton()}\n            </Form>\n\n            <br />\n            <h5>Already registered proposals</h5>\n            <ListGroup className=\"text-left\">\n              {proposalList.map((prop, i) => {\n                return (\n                  <ListGroup.Item key={i}>\n                    {`[${i}][Votes:${prop.voteCount}] ${prop.description}`}\n                    &nbsp;&nbsp;{getVoteButton(i)}\n                  </ListGroup.Item>\n                );\n              })}\n            </ListGroup>\n            <ul></ul>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col></Col>\n    </Row>\n  );\n};\n\nexport default ProposalsComponent;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Web3 from \"web3\";\n\n// internal components\nimport HeaderComponent from \"./components/HeaderComponent.js\";\nimport WhitelistComponent from \"./components/WhitelistComponent.js\";\nimport StatusChange from \"./components/StatusChange\";\nimport ProposalsComponent from \"./components/ProposalsComponent\";\n\nimport { Button, Container, Row, Col, Card } from \"react-bootstrap\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [context, setContext] = useState({\n    web3: null,\n    accounts: null,\n    contract: null,\n    contractOwner: null,\n  });\n  const [currentStatus, setCurrentStatus] = useState(\"\");\n\n  const initState = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = new Web3(window.ethereum);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      //console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      const contractOwner = await instance.methods.owner().call();\n\n      setContext({\n        web3: web3,\n        accounts: accounts,\n        contract: instance,\n        contractOwner: contractOwner,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    window.ethereum.on(\"accountsChanged\", async () => {\n      initState();\n    });\n\n    initState();\n  }, []);\n\n  if (!context.web3) {\n    return (\n      <Fragment>\n        <Container>\n          <Row>\n            <Col></Col>\n            <Col xs={6}>\n              <Card className=\"text-center\">\n                <Card.Body>\n                  <Card.Title>Not connected !</Card.Title>\n                  <Button variant=\"primary\" onClick={initState}>\n                    Connect\n                  </Button>\n                </Card.Body>\n              </Card>\n            </Col>\n            <Col></Col>\n          </Row>\n        </Container>\n      </Fragment>\n    );\n  } else\n    return (\n      <Fragment>\n        <Container>\n          <HeaderComponent\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n          />\n          <WhitelistComponent context={context} currentStatus={currentStatus} />\n          <StatusChange\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n            initialStatus={0}\n            Title=\"2. Change status to start proposal registration\"\n          />\n          <ProposalsComponent context={context} currentStatus={currentStatus} />\n          <StatusChange\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n            initialStatus={1}\n            Title=\"4. Change status to end proposal registration\"\n          />\n          <StatusChange\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n            initialStatus={2}\n            Title=\"5. Change status to start voting session\"\n          />\n          <StatusChange\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n            initialStatus={3}\n            Title=\"6. Change status to end voting session\"\n          />\n          <StatusChange\n            context={context}\n            currentStatus={currentStatus}\n            setCurrentStatus={setCurrentStatus}\n            initialStatus={4}\n            Title=\"7. Votes tallied\"\n          />\n        </Container>\n      </Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}